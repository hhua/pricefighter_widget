// Generated by eBay Common SDK Platform
package com.ebay.services.merchandising;

import com.ebay.jxb.annotation.*;
import java.util.List;
import com.ebay.jxb.type.Duration;
/**
 * 
 * Contains details for an active item listing.
 * 
 */
@Root(name = "Item")
@Namespace(namespaceURI="http://www.ebay.com/marketplace/services", prefix="")
public class Item   {


	@Element(name="itemId")
	private String itemId;
	

	@Element(name="title")
	private String title;
	

	@Element(name="viewItemURL")
	private String viewItemURL;
	

	@Element(name="currentPrice")
	private Amount currentPrice;
	

	@Element(name="originalPrice")
	private Amount originalPrice;
	

	@Element(name="globalId")
	private String globalId;
	

	@Element(name="timeLeft")
	private Duration timeLeft;
	

	@Element(name="primaryCategoryId")
	private String primaryCategoryId;
	

	@Element(name="primaryCategoryName")
	private String primaryCategoryName;
	

	@Element(name="subtitle")
	private String subtitle;
	

	@Element(name="bidCount")
	private Integer bidCount;
	

	@Element(name="buyItNowPrice")
	private Amount buyItNowPrice;
	

	@Element(name="country")
	private String country;
	

	@Element(name="imageURL")
	private String imageURL;
	

	@Element(name="shippingCost")
	private Amount shippingCost;
	

	@Element(name="shippingType")
	private String shippingType;
	

	@Element(name="watchCount")
	private Integer watchCount;
	

	private List<Object> any;
	
    
	/**
     * 
     * The ID that uniquely identifies the item listing. The ID is generated by
     * eBay after an item is listed. You cannot choose or revise this value.
     * 
	 */
	public String getItemId() {
	    return this.itemId;
	}
	
	public void setItemId(String itemId) {
	    this.itemId = itemId;
	}
	
	/**
     * 
     * Name of the item as it appears in the listing or search results.
     * 
	 */
	public String getTitle() {
	    return this.title;
	}
	
	public void setTitle(String title) {
	    this.title = title;
	}
	
	/**
     * 
     * The URL of the web page where a user can view the listing. On the US
     * site, this is called the "View Item" page. If you enabled affiliate
     * tracking in the call, viewItemURL contains a string that includes
     * affiliate tracking information (see the
     * <a href="https://www.ebaypartnernetwork.com/">eBay Partner
     * Network</a>).
     * 
	 */
	public String getViewItemURL() {
	    return this.viewItemURL;
	}
	
	public void setViewItemURL(String viewItemURL) {
	    this.viewItemURL = viewItemURL;
	}
	
	/**
     * 
     * For competitive-bidding listings (Chinese and Dutch auctions), current
     * minimum asking price (start price) or the current highest bid for the
     * item if bids have been placed. Shows minimum bid if no bids have been
     * placed on the item. For Basic Fixed-Price, Store Inventory, or Ad type
     * listings, this returns the original price specified when the item was
     * listed/re-listed or the revised price if the item was revised.
     * 
	 */
	public Amount getCurrentPrice() {
	    return this.currentPrice;
	}
	
	public void setCurrentPrice(Amount currentPrice) {
	    this.currentPrice = currentPrice;
	}
	
	/**
     * 
     * Original price of an item whose price a seller has reduced with the
     * Promotional Price Display feature. Only returned if the price has been
     * revised.
     * 
	 */
	public Amount getOriginalPrice() {
	    return this.originalPrice;
	}
	
	public void setOriginalPrice(Amount originalPrice) {
	    this.originalPrice = originalPrice;
	}
	
	/**
     * 
     * The site upon which the item is listed. Returns a Global ID, which is a
     * unique identifier for combinations of site, language, and territory.
     * <br><br>
     * For a list of possible enumeration values and how they map to eBay sites,
     * see <a href="Enums/GlobalIdList.html">Global ID Values</a>.
     * 
	 */
	public String getGlobalId() {
	    return this.globalId;
	}
	
	public void setGlobalId(String globalId) {
	    this.globalId = globalId;
	}
	
	/**
     * 
     * Time left before the item listing ends. The duration is represented in the
     * ISO 8601 duration format (PnDTnHnMnS). For ended listings, the time left is
     * P0DT0H0M0S (zero days, zero hours, zero minutes, and zero seconds).
     * 
	 */
	public Duration getTimeLeft() {
	    return this.timeLeft;
	}
	
	public void setTimeLeft(Duration timeLeft) {
	    this.timeLeft = timeLeft;
	}
	
	/**
     * 
     * Numeric ID of the first (or only) category in which the item is listed.
     * (Listings can appear in more than one category.)<br>
     * <span class="tablenote"><b>Note:</b> Currently, the
     * Merchandising API calls do not return a listing's secondary category, if 
     * any.</span>
     * 
	 */
	public String getPrimaryCategoryId() {
	    return this.primaryCategoryId;
	}
	
	public void setPrimaryCategoryId(String primaryCategoryId) {
	    this.primaryCategoryId = primaryCategoryId;
	}
	
	/**
     * 
     * Display name of the first (or only) category in which the item is listed.
     * This is a fully qualified category breadcrumb (e.g., Computers &
     * Networking:Laptops, Notebooks).
     * 
	 */
	public String getPrimaryCategoryName() {
	    return this.primaryCategoryName;
	}
	
	public void setPrimaryCategoryName(String primaryCategoryName) {
	    this.primaryCategoryName = primaryCategoryName;
	}
	
	/**
     * 
     * Subtitle of the item. Only returned if the seller included a subtitle for
     * the listing.
     * 
	 */
	public String getSubtitle() {
	    return this.subtitle;
	}
	
	public void setSubtitle(String subtitle) {
	    this.subtitle = subtitle;
	}
	
	/**
     * 
     * The number of bids that have been placed on the item.
     * 
	 */
	public Integer getBidCount() {
	    return this.bidCount;
	}
	
	public void setBidCount(Integer bidCount) {
	    this.bidCount = bidCount;
	}
	
	/**
     * 
     * The Buy It Now Price of the item (if any), in the currency of the site on
     * which the item was listed.
     * <br><br>
     * For Chinese auctions (Quantity=1, competitive bidding online auctions), Buy It
     * Now lets a user purchase the item at a fixed price and end the auction
     * immediately. On most sites, after a Chinese auction has bids, the listing is no
     * longer eligible for Buy It Now. However, calls can still return the Buy It Now
     * Price that the seller set for the listing. Use the item.bidCount field to
     * determine whether an auction with Buy It Now has bids or not.
     * <br><br>
     * Some eBay sites also support Buy It Now for Dutch auctions (multi-quantity,
     * competitive bidding), where you can buy multiple items from the same listing at
     * a fixed price, instead of bidding. On some sites, the Buy It Now option remains
     * available for Dutch auctions even after there are bids.
     * <br><br>
     * For fixed-price (FixedPriceItem) and Store Inventory listings
     * (StoresFixedPrice), see currentPrice instead.
     * <br><br>
     * Only returned if an item was listed with Buy It Now.
     * 
	 */
	public Amount getBuyItNowPrice() {
	    return this.buyItNowPrice;
	}
	
	public void setBuyItNowPrice(Amount buyItNowPrice) {
	    this.buyItNowPrice = buyItNowPrice;
	}
	
	/**
     * 
     * Two-letter ISO 3166 country code to indicate the country where the item is
     * located.
     * For English names that correspond to each code (e.g., KY="Cayman Islands"),
     * see the ISO site: <a
     * href="http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html">
     * http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html</a>.
     * 
	 */
	public String getCountry() {
	    return this.country;
	}
	
	public void setCountry(String country) {
	    this.country = country;
	}
	
	/**
     * 
     * URL for a picture used as the Gallery thumbnail, if any. The image uses one
     * of the following graphics formats: JPEG, BMP, TIF, or GIF. Only returned if
     * the seller chose to show a gallery image.
     * 
	 */
	public String getImageURL() {
	    return this.imageURL;
	}
	
	public void setImageURL(String imageURL) {
	    this.imageURL = imageURL;
	}
	
	/**
     * 
     * The shipping cost associated with the first shipping service. Only returned
     * when shipping type is flat.
     * 
	 */
	public Amount getShippingCost() {
	    return this.shippingCost;
	}
	
	public void setShippingCost(Amount shippingCost) {
	    this.shippingCost = shippingCost;
	}
	
	/**
     * 
     * The shipping cost model offered by the seller.
     * <br><br>
     * <dl>
     * <lh>Applicable values:</lh>
     * <dt>Calculated</dt>
     * <dd>
     * Calculated shipping model: the cost of shipping is determined in
     * large part by the seller-offered and buyer-selected shipping service. The
     * seller might assess an additional fee via PackagingHandlingCosts.
     * </dd>
     * <dt>CalculatedDomesticFlatInternational</dt>
     * <dd>
     * The seller specified one or more calculated domestic shipping
     * services and one or more flat international shipping services.
     * </dd>
     * <dt>Flat</dt>
     * <dd>
     * Flat shipping model: the seller establishes the cost of shipping and
     * cost of shipping insurance, regardless of what any buyer-selected shipping
     * service might charge the seller.
     * </dd>
     * <dt>FlatDomesticCalculatedInternational</dt>
     * <dd>
     * The seller specified one or more flat domestic shipping services and
     * one or more calculated international shipping services.
     * </dd>
     * <dt>Free</dt>
     * <dd>
     * Free shipping: Seller has specified free shipping for the item. The cost of
     * shipping is zero for the first domestic shipping service (for flat or
     * calculated shipping).
     * </dd>
     * <dt>Freight</dt>
     * <dd>
     * Freight shipping model: The cost of shipping is determined by a third party,
     * FreightQuote.com, based on the item location (zip code).
     * </dd>
     * <dt>NotSpecified</dt>
     * <dd>
     * The seller did not specify the shipping type.
     * </dd>
     * </dl>
     * 
	 */
	public String getShippingType() {
	    return this.shippingType;
	}
	
	public void setShippingType(String shippingType) {
	    this.shippingType = shippingType;
	}
	
	/**
     * 
     * The number of watches placed on this item from buyers' My eBay accounts.
     * 
	 */
	public Integer getWatchCount() {
	    return this.watchCount;
	}
	
	public void setWatchCount(Integer watchCount) {
	    this.watchCount = watchCount;
	}
	
	public List<Object> getAny() {
	    return this.any;
	}
	
	public void setAny(List<Object> any) {
	    this.any = any;
	}
	
}